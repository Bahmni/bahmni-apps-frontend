/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// Precache all of the assets generated by your build process
// Their URLs are injected into the manifest variable below
// This variable must be present somewhere in your service worker file
const manifest = self.__WB_MANIFEST;

// Enable the service worker as soon as it's activated
clientsClaim();
precacheAndRoute(manifest);

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html
  ({ request, url }: { request: Request; url: URL }) => {
    try {
      // If this is a URL that starts with /_, skip
      if (url.pathname.startsWith('/_')) {
        return false;
      }

      // If this looks like a URL for a resource, because it contains
      // a file extension, skip
      if (url.pathname.match(fileExtensionRegexp)) {
        return false;
      }

      // Only handle GET requests
      if (request.method !== 'GET') {
        return false;
      }

      // Return true to signal that we want to use the handler
      return true;
    } catch (error) {
      console.error('Error in navigation route handler:', error);
      return false;
    }
  },
  createHandlerBoundToURL('/index.html'),
);

// Cache images with a Cache First strategy
registerRoute(
  // Check to see if the request's destination is style for stylesheets
  ({ request }) => request.destination === 'image',
  // Use a Cache First caching strategy
  new CacheFirst({
    // Put all cached files in a cache named 'images'
    cacheName: 'images',
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      // new CacheableResponsePlugin({
      //   statuses: [200],
      // }),
      // Don't cache more than 50 items, and expire them after 30 days
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days
      }),
    ],
  }),
);

// Cache CSS and JavaScript Files
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'font',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
